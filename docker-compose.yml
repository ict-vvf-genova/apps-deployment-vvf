name: "apps"
version: "3.7"
services:

  caddy:
    image: "docker.io/caddy:latest"
    restart: "always"
    container_name: "apps-caddy"
    ports:
      - "80:80/tcp" # HTTP.
      - "443:443/tcp" # HTTPS.
      - "443:443/udp" # HTTPS (QUIC).
    volumes:
      - "./config/caddy/Caddyfile:/etc/caddy/Caddyfile:ro"
      - "./config/certs/:/etc/certs/:ro"  # certificates
      - "./web/:/web/:ro"  # webserver
      - "./data/caddy/data/:/data/:Z"
      - "./data/caddy/config/:/config/:Z"
    environment:
      WHOAMI_PORT: ${WHOAMI_PORT:?}
      GRIST_PORT: ${GRIST_PORT:?}
      DEX_PORT: ${DEX_PORT:?}
      NODERED_PORT: ${NODERED_PORT:?}
    networks:
      - "public"
      - "private"

  whoami:
    image: "docker.io/traefik/whoami"
    container_name: "apps-whoami"
    command:
      - --port=${WHOAMI_PORT:?}
    networks:
      - "private"

  dex:
    image: "ghcr.io/ict-vvf-genova/dex-smtp:master"
    restart: "always"
    container_name: "apps-dex"
    networks:
      - "public"
      - "private"
    volumes:
      - "./config/dex/config.yaml:/etc/dex/config.yaml:ro"
      - "./config/certs/:/etc/certs/:ro"
    environment:
      DEX_DOMAIN: "${DEX_SUBDOMAIN:?}.${DOMAIN:?}"
      DEX_PORT: ${DEX_PORT:?}
      DEX_SMTP_NAME: "${DEX_SMTP_NAME:?}"
      DEX_SMTP_ID: "${DEX_SMTP_ID:?}"
      DEX_SMTP_HOST: "${DEX_SMTP_HOST:?}"
      DEX_SMTP_DOMAIN: "${DEX_SMTP_DOMAIN:?}"
      DEX_SMTP_LABEL: "${DEX_SMTP_LABEL:?}"
      DEX_ADMIN: "${DEX_ADMIN:?}"
      DEX_ADMIN_USER_EMAIL: "${DEX_ADMIN_USER_EMAIL:?}"
      DEX_ADMIN_USER_PASSWORD_HASH: "${DEX_ADMIN_USER_PASSWORD_HASH:?}"
      GRIST_DOMAIN: "${GRIST_SUBDOMAIN:?}.${DOMAIN:?}"
      GRIST_OAUTH_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      DEX_LOGO_URL: "${DEX_LOGO_URL:?}"
      DEX_FRONTEND_ISSUER: "${DEX_FRONTEND_ISSUER:?}"
    command: ["dex", "serve", "/etc/dex/config.yaml"]
    healthcheck:
      test: ["CMD", "wget", "-qO", "/dev/null", "http://localhost:${DEX_PORT:?}/healthz"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2
      
  grist:
    image: "docker.io/gristlabs/grist:1.1.10"
    restart: "always"
    container_name: "apps-grist"
    networks:
      - "public"
      - "private"
    volumes:
      - "./data/grist/persist/:/persist/:Z"
      - "./config/certs/:/etc/certs/:ro"
    environment:
      DEBUG: "1"
      APP_HOME_URL: "https://${GRIST_SUBDOMAIN:?}.${DOMAIN:?}"
      PORT: ${GRIST_PORT:?}
      GRIST_SESSION_SECRET: "${GRIST_SESSION_SECRET:?}"
      GRIST_SINGLE_ORG: "${GRIST_SINGLE_ORG:?}"
      GRIST_DEFAULT_EMAIL: "${DEX_ADMIN_USER_EMAIL:?}"
      GRIST_SUPPORT_EMAIL: "${DEX_ADMIN_USER_EMAIL:?}"
      # OIDC Authentication
      GRIST_OIDC_IDP_ISSUER: "https://${DEX_SUBDOMAIN:?}.${DOMAIN:?}/.well-known/openid-configuration"
      GRIST_OIDC_IDP_CLIENT_ID: "grist"
      GRIST_OIDC_IDP_CLIENT_SECRET: "${GRIST_OAUTH_CLIENT_SECRET:?}"
      GRIST_OIDC_IDP_SCOPES: "openid email profile"
      GRIST_OIDC_IDP_SKIP_END_SESSION_ENDPOINT: "true"
      GRIST_FORCE_LOGIN: "true"  # no unauthenticated users
      GRIST_SUPPORT_ANON: "false"  # no anonymous users
      # Local CA for internal https
      NODE_EXTRA_CA_CERTS: "/etc/certs/rootCA.pem"
      NODE_TLS_REJECT_UNAUTHORIZED: "${GRIST_NODE_TLS_REJECT_UNAUTHORIZED:-1}"
      # Redis
      REDIS_URL: "redis://:${REDIS_GRIST_PASSWORD:?}@redis:6379/1"
      # Predefined
      GRIST_SANDBOX_FLAVOR: "gvisor"
      GRIST_ORG_IN_PATH: "true"
      GRIST_MAX_UPLOAD_ATTACHMENT_MB: "10"
      GRIST_MAX_UPLOAD_IMPORT_MB: "50"
      GRIST_THROTTLE_CPU: "true"
      # UI customization
      GRIST_PAGE_TITLE_SUFFIX: "_blank"
      GRIST_HIDE_UI_ELEMENTS: "helpCenter,billing,templates,multiAccounts,sendToDrive,tutorials"
      GRIST_WIDGET_LIST_URL: "https://github.com/gristlabs/grist-widget/releases/download/latest/manifest.json"
      GRIST_TELEMETRY_LEVEL: "off"
    healthcheck:
      test: ["CMD", "bash", "-euc", ">/dev/tcp/localhost/${GRIST_PORT:?}"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2
    depends_on:
      dex:
        condition: "service_healthy"
      redis:
        condition: "service_healthy"

  redis:
    image: "docker.io/redis:7-bookworm"
    restart: "always"
    container_name: "apps-redis"
    networks:
      - "private"
    volumes:
      - "./config/redis/redis.conf.sh:/etc/redis/redis.conf.sh:ro"
      - "./data/redis/:/data/:Z"
    environment:
      REDISCLI_AUTH: "${REDIS_GRIST_PASSWORD:?}"
      REDIS_LOGLEVEL: "warning"
    command: ["sh", "-euc", "sh /etc/redis/redis.conf.sh | exec redis-server -"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      start_period: "5m"
      interval: "10s"
      timeout: "5s"
      retries: 2

  nodered:
    image: "docker.io/nodered/node-red:latest"
    restart: "always"
    container_name: "apps-nodered"
    user: "0:0"
    environment:
      PORT: ${NODERED_PORT:?}
      NODERED_ENCRYPTION_KEY: ${NODERED_ENCRYPTION_KEY:?}
      TZ: "{$NODERED_TIMEZONE}"
    volumes:
      - "./config/nodered/settings.js:/data/settings.js:ro"  # settings
      - "./data/nodered/:/data/:Z"
    networks:
      - "public"
      - "private"
      
networks:

  public:
    name: "apps-public"
    internal: false

  private:
    name: "apps-private"
    internal: true

